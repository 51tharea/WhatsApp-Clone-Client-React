{"version":3,"sources":["graphql/fragments/message.fragment.ts","graphql/fragments/chat.fragment.ts","graphql/fragments/fullChat.fragment.ts","graphql/fragments/user.fragment.ts","graphql/queries/chats.query.ts","graphql/queries/me.query.ts","graphql/queries/users.query.ts","graphql/subscriptions/chatAdded.subscription.ts","graphql/subscriptions/chatUpdated.subscription.ts","graphql/subscriptions/messageAdded.subscription.ts","graphql/subscriptions/userAdded.subscription.ts","graphql/subscriptions/userUpdated.subscription.ts","polyfills/react-apollo-hooks.ts","services/auth.service.tsx","services/cache.service.tsx","apollo-client.ts","components/AnimatedSwitch.tsx","components/AuthScreen/SignInForm.tsx","components/AuthScreen/SignUpForm.tsx","components/AuthScreen/index.tsx","components/Navbar.tsx","components/ChatScreen/ChatNavbar.tsx","components/ChatScreen/MessageBox.tsx","components/ChatScreen/MessagesList.tsx","components/ChatScreen/index.tsx","components/ChatsListScreen/AddChatButton.tsx","components/ChatsListScreen/ChatsList.tsx","components/ChatsListScreen/ChatsNavbar.tsx","components/ChatsListScreen/index.tsx","services/picture.service.tsx","components/GroupDetailsScreen/CompleteGroupButton.tsx","components/GroupDetailsScreen/GroupDetailsNavbar.tsx","components/GroupDetailsScreen/index.tsx","components/UsersList.tsx","components/NewChatScreen/NewChatNavbar.tsx","components/NewChatScreen/NewGroupButton.tsx","components/NewChatScreen/index.tsx","components/NewGroupScreen/CreateGroupButton.tsx","components/NewGroupScreen/NewGroupNavbar.tsx","components/NewGroupScreen/index.tsx","components/SettingsScreen/SettingsForm.tsx","components/SettingsScreen/SettingsNavbar.tsx","components/SettingsScreen/index.tsx","components/App.tsx","registerServiceWorker.ts","index.tsx"],"names":["gql","_templateObject","chat_fragment_templateObject","message","fullChat_fragment_templateObject","chat","user_fragment_templateObject","chats_query_templateObject","fragments","me_query_templateObject","users_query_templateObject","chatAdded_subscription_templateObject","chatUpdated_subscription_templateObject","messageAdded_subscription_templateObject","userAdded_subscription_templateObject","userUpdated_subscription_templateObject","useSubscription","query","options","arguments","length","undefined","onSubscriptionData","prevOptions","useRef","client","useApolloClient","_useState","useState","_useState2","Object","slicedToArray","data","setData","_useState3","_useState4","error","setError","_useState5","_useState6","loading","setLoading","subscriptionOptions","variables","fetchPolicy","useEffect","current","subscription","subscribe","next","_ref","subscriptionData","err","complete","unsubscribe","isEqual","useMemo","MyContext","React","useMe","useContext","withAuth","Component","props","getAuthHeader","react","Redirect","to","myResult","useQuery","queries","subscriptions","chats","chatAdded","writeFragment","id","defaultDataIdFromObject","fragment","fragmentName","readQuery","e","some","unshift","writeQuery","_ref2","chatUpdated","_ref3","fullChat","messageAdded","readFragment","messages","push","lastMessage","index","findIndex","splice","_ref4","users","userAdded","user","_ref5","userUpdated","Provider","value","me","storeAuthHeader","auth","localStorage","setItem","getItem","signIn","username","password","concat","btoa","fetch","process","method","headers","Authorization","then","res","status","Promise","reject","statusText","signUp","name","body","JSON","stringify","Accept","Content-Type","signOut","removeItem","store","clearStore","httpUri","wsUri","replace","httpLink","HttpLink","uri","wsLink","WebSocketLink","reconnect","connectionParams","authToken","authLink","setContext","_","objectSpread","terminatingLink","split","getMainDefinition","kind","operation","link","ApolloLink","from","cache","InMemoryCache","apollo_client","ApolloClient","glide","val","spring","stiffness","damping","mapStyles","styles","transform","offset","styled","AnimatedSwitch","attrs","atEnter","atLeave","atActive","AnimatedSwitch_templateObject","SignInForm","history","setUsername","setPassword","className","style","width","TextField_default","a","label","onChange","target","margin","placeholder","type","Button_default","color","variant","disabled","onClick","catch","SignUpForm","setName","oldPassword","setOldPassword","_useState7","_useState8","_useState9","_useState10","float","paddingRight","autoComplete","paddingLeft","Style","div","AuthScreen_templateObject","AuthScreen","location","src","Route","exact","path","component","Toolbar","Navbar_templateObject","Navbar","children","Navbar_Style","ChatNavbar_templateObject","_templateObject2","mutation","_templateObject3","ChatNavbar","chatId","removeChat","useMutation","update","__typename","popped","setPopped","navToChats","ChatNavbar_Style","ArrowBack_default","picture","isGroup","bind","MoreVert_default","Popover_default","open","onClose","anchorOrigin","vertical","horizontal","transformOrigin","marginLeft","List_default","ListItem_default","button","Info_default","Delete_default","MessageBox_templateObject","MessageBox_templateObject2","MessageBox","setMessage","addMessage","content","optimisticResponse","uniqid","sender","createdAt","Date","recipients","ownership","submitMessage","MessageBox_Style","onKeyPress","charCode","Send_default","MessagesList_templateObject","MessagesList_templateObject2","MessagesList","_useQuery$data$chat","selfRef","resetScrollTop","ReactDOM","scrollTop","Number","MAX_SAFE_INTEGER","MessagesList_Style","ref","map","key","moment","format","ChatScreen_templateObject","ChatScreen","match","params","ChatScreen_Style","fallback","AddChatButton_templateObject","AddChatButton","AddChatButton_Style","Chat_default","ChatsList_templateObject","ChatsList_templateObject2","ChatsList","navToChat","ChatsList_Style","ChatsNavbar_templateObject","ChatsNavbar","ChatsNavbar_Style","Settings_default","PowerSettingsNew_default","ChatsListScreen","pickPicture","resolve","input","document","createElement","accept","onchange","files","onerror","click","uploadProfilePicture","file","formData","FormData","append","json","CompleteGroupButton_templateObject","CompleteGroupButton_templateObject2","CompleteGroupButton","groupName","groupPicture","addGroup","userIds","CompleteGroupButton_Style","ArrowRightAlt_default","GroupDetailsNavbar_templateObject","GroupDetailsNavbar","GroupDetailsNavbar_Style","GroupDetailsScreen_templateObject","ownedByMe","GroupDetailsScreen_templateObject2","GroupDetailsScreen_templateObject3","GroupDetailsScreen","participants","updateChat","chatNameState","chatPictureState","owner","allTimeMembers","slice","_chatNameState","chatName","_chatPictureState","chatPicture","state","Array","participant","_chatNameState3","_chatNameState4","setChatName","_chatPictureState3","_chatPictureState4","setChatPicture","updateChatPicture","asyncToGenerator","regenerator_default","mark","_callee","url","wrap","_context","prev","abrupt","sent","stop","this","apply","GroupDetailsScreen_Style","onBlur","autoFocus","UsersList_templateObject","selectable","UsersList_templateObject2","UsersList","_selectable$onSelecti","onSelectionChange","onUserPick","selectedUsers","setSelectedUsers","onListItemClick","includes","indexOf","toConsumableArray","UsersList_Style","CheckCircle_default","NewChatNavbar_templateObject","NewChatNavbar","NewChatNavbar_Style","NewGroupButton_templateObject","NewGroupButton","NewGroupButton_Style","GroupAdd_default","NewChatScreen_templateObject","NewChatScreen_templateObject2","NewChatScreen","addChat","NewChatScreen_Style","userId","CreateGroupButton_templateObject","CreateGroupButton","CreateGroupButton_Style","Add_default","NewGroupNavbar_templateObject","NewGroupNavbar","NewGroupNavbar_Style","NewGroupScreen_templateObject","NewGroupScreen","NewGroupScreen_Style","SettingsForm_templateObject","SettingsForm_templateObject2","SettingsForm","myName","setMyName","myPicture","setMyPicture","updateUser","updatePicture","SettingsForm_Style","Edit_default","SettingsNavbar_templateObject","SettingsNavbar","SettingsNavbar_Style","SettingsScreen","RedirectToChats","App","BrowserRouter","isLocalhost","Boolean","window","hostname","register","navigator","URL","toString","origin","addEventListener","swUrl","response","get","serviceWorker","ready","registration","unregister","reload","registerValidSW","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","theme","createMuiTheme","palette","primary","main","secondary","typography","useNextVariants","startApp","ApolloContext","apolloClient","getElementById","registerServiceWorker","cordova"],"mappings":"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","file":"static/js/main.cfa49427.chunk.js","sourcesContent":["import gql from 'graphql-tag'\n\nexport default gql`\n  fragment Message on Message {\n    id\n    chat {\n      id\n    }\n    sender {\n      id\n      name\n    }\n    content\n    createdAt\n    recipients {\n      user {\n        id\n      }\n      message {\n        id\n        chat {\n          id\n        }\n      }\n      chat {\n        id\n      }\n      receivedAt\n      readAt\n    }\n    ownership\n  }\n`","import gql from 'graphql-tag'\nimport message from './message.fragment'\n\nexport default gql `\n  fragment Chat on Chat {\n    id\n    name\n    picture\n    allTimeMembers {\n      id\n      name\n      picture\n    }\n    owner {\n      id\n    }\n    isGroup\n    lastMessage {\n      ...Message\n    }\n  }\n  ${message}\n`\n","import gql from 'graphql-tag'\nimport chat from './chat.fragment'\nimport message from './message.fragment'\n\nexport default gql `\n  fragment FullChat on Chat {\n    ...Chat\n    messages {\n      ...Message\n    }\n  }\n  ${chat}\n  ${message}\n`\n","import gql from 'graphql-tag'\n\nexport default gql `\n  fragment User on User {\n    id\n    name\n    picture\n  }\n`","import gql from 'graphql-tag'\nimport * as fragments from '../fragments'\n\nexport default gql `\n  query Chats {\n    chats {\n      ...Chat\n    }\n  }\n  ${fragments.chat}\n`","import gql from 'graphql-tag'\nimport * as fragments from '../fragments'\n\nexport default gql `\n  query Me {\n    me {\n      ...User\n    }\n  }\n  ${fragments.user}\n`","import gql from 'graphql-tag'\nimport * as fragments from '../fragments'\n\nexport default gql `\n  query Users {\n    users {\n      ...User\n    }\n  }\n  ${fragments.user}\n`","import gql from 'graphql-tag'\nimport * as fragments from '../fragments'\n\nexport default gql `\n  subscription ChatAdded {\n    chatAdded {\n      ...Chat\n    }\n  }\n  ${fragments.chat}\n`\n","import gql from 'graphql-tag'\nimport * as fragments from '../fragments'\n\nexport default gql `\n  subscription ChatUpdated {\n    chatUpdated {\n      ...Chat\n    }\n  }\n  ${fragments.chat}\n`\n","import gql from 'graphql-tag'\nimport * as fragments from '../fragments'\n\nexport default gql `\n  subscription MessageAdded {\n    messageAdded {\n      ...Message\n    }\n  }\n  ${fragments.message}\n`\n","import gql from 'graphql-tag'\nimport * as fragments from '../fragments'\n\nexport default gql `\n  subscription UserAdded {\n    userAdded {\n      ...User\n    }\n  }\n  ${fragments.user}\n`\n","import gql from 'graphql-tag'\nimport * as fragments from '../fragments'\n\nexport default gql `\n  subscription UserUpdated {\n    userUpdated {\n      ...User\n    }\n  }\n  ${fragments.user}\n`\n","import { DataProxy } from 'apollo-cache'\nimport { OperationVariables, FetchPolicy } from 'apollo-client'\nimport { DocumentNode, GraphQLError } from 'graphql'\nimport { useEffect, useMemo, useRef, useState } from 'react'\nimport { useApolloClient } from 'react-apollo-hooks'\nimport * as isEqual from 'react-fast-compare'\n\nexport type SubscriptionOptions<T, TVariables> = {\n  variables?: TVariables\n  fetchPolicy?: FetchPolicy\n  onSubscriptionData?: (options?: { client?: DataProxy; subscriptionData?: T }) => any\n}\n\nexport const useSubscription = <T, TVariables = OperationVariables>(\n  query: DocumentNode,\n  options: SubscriptionOptions<T, TVariables> = {},\n): {\n  data: T | { [key: string]: void }\n  error?: GraphQLError\n  loading: boolean\n} => {\n  const onSubscriptionData = options.onSubscriptionData\n  const prevOptions = useRef<typeof options | null>(null)\n  const client = useApolloClient()\n  const [data, setData] = useState<T | {}>({})\n  const [error, setError] = useState<GraphQLError | null>(null)\n  const [loading, setLoading] = useState<boolean>(true)\n\n  const subscriptionOptions = {\n    query,\n    variables: options.variables,\n    fetchPolicy: options.fetchPolicy,\n  }\n\n  useEffect(\n    () => {\n      prevOptions.current = subscriptionOptions\n      const subscription = client\n        .subscribe<{ data: T }, TVariables>(subscriptionOptions)\n        .subscribe({\n          next: ({ data }) => {\n            setData(data)\n\n            if (onSubscriptionData) {\n              onSubscriptionData({ client, subscriptionData: data })\n            }\n          },\n          error: err => {\n            setError(err)\n            setLoading(false)\n          },\n          complete: () => {\n            setLoading(false)\n          },\n        })\n\n      return () => {\n        subscription.unsubscribe()\n      }\n    },\n    [isEqual(prevOptions.current, subscriptionOptions) ? prevOptions.current : subscriptionOptions],\n  )\n\n  return useMemo(\n    () => ({\n      data,\n      error,\n      loading,\n    }),\n    [data, error, loading],\n  )\n}\n","import gql from 'graphql-tag'\nimport * as React from 'react'\nimport { useContext } from 'react'\nimport { useQuery } from 'react-apollo-hooks'\nimport { Redirect } from 'react-router-dom'\nimport store from '../apollo-client'\nimport * as queries from '../graphql/queries'\nimport { Me, User } from '../graphql/types'\nimport { useSubscriptions } from './cache.service'\n\nconst MyContext = React.createContext<User.Fragment>(null)\n\nexport const useMe = () => {\n  return useContext(MyContext)\n}\n\nexport const withAuth = (Component: React.ComponentType) => {\n  return props => {\n    if (!getAuthHeader()) return <Redirect to=\"/sign-in\" />\n\n    // Validating against server\n    const myResult = useQuery<Me.Query>(queries.me)\n\n    // Override TypeScript definition issue with the current version\n    if (myResult.error) return <Redirect to=\"/sign-in\" />\n\n    useSubscriptions()\n\n    return (\n      <MyContext.Provider value={myResult.data.me}>\n        <Component {...props} />\n      </MyContext.Provider>\n    )\n  }\n}\n\nexport const storeAuthHeader = (auth: string) => {\n  localStorage.setItem('Authorization', auth)\n}\n\nexport const getAuthHeader = (): string | null => {\n  return localStorage.getItem('Authorization') || null\n}\n\nexport const signIn = ({ username, password }) => {\n  const auth = `Basic ${btoa(`${username}:${password}`)}`\n\n  return fetch(`${process.env.REACT_APP_SERVER_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      Authorization: auth,\n    },\n  }).then(res => {\n    if (res.status < 400) {\n      storeAuthHeader(auth)\n    } else {\n      return Promise.reject(res.statusText)\n    }\n  })\n}\n\nexport const signUp = ({ username, password, name }) => {\n  return fetch(`${process.env.REACT_APP_SERVER_URL}/signup`, {\n    method: 'POST',\n    body: JSON.stringify({ name }),\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      Authorization: `Basic ${btoa(`${username}:${password}`)}`,\n    },\n  })\n}\n\nexport const signOut = () => {\n  localStorage.removeItem('Authorization')\n\n  return store.clearStore()\n}\n\nexport default {\n  useMe,\n  withAuth,\n  storeAuthHeader,\n  getAuthHeader,\n  signIn,\n  signUp,\n  signOut,\n}\n","import { defaultDataIdFromObject } from 'apollo-cache-inmemory'\nimport * as fragments from '../graphql/fragments'\nimport * as queries from '../graphql/queries'\nimport * as subscriptions from '../graphql/subscriptions'\nimport { useSubscription } from '../polyfills/react-apollo-hooks'\nimport {\n  Chats,\n  Users,\n  Message,\n  FullChat,\n  User,\n  MessageAdded,\n  ChatAdded,\n  ChatUpdated,\n  UserAdded,\n  UserUpdated,\n} from '../graphql/types'\n\nexport const useSubscriptions = () => {\n  useSubscription<ChatAdded.Subscription>(subscriptions.chatAdded, {\n    onSubscriptionData: ({ client, subscriptionData: { chatAdded } }) => {\n      client.writeFragment({\n        id: defaultDataIdFromObject(chatAdded),\n        fragment: fragments.chat,\n        fragmentName: 'Chat',\n        data: chatAdded,\n      })\n\n      let chats\n      try {\n        chats = client.readQuery<Chats.Query>({\n          query: queries.chats,\n        }).chats\n      } catch (e) {}\n\n      if (chats && !chats.some(chat => chat.id === chatAdded.id)) {\n        chats.unshift(chatAdded)\n\n        client.writeQuery({\n          query: queries.chats,\n          data: { chats },\n        })\n      }\n    },\n  })\n\n  useSubscription<ChatUpdated.Subscription>(subscriptions.chatUpdated, {\n    onSubscriptionData: ({ client, subscriptionData: { chatUpdated } }) => {\n      client.writeFragment({\n        id: defaultDataIdFromObject(chatUpdated),\n        fragment: fragments.chat,\n        fragmentName: 'Chat',\n        data: chatUpdated,\n      })\n    },\n  })\n\n  useSubscription<MessageAdded.Subscription>(subscriptions.messageAdded, {\n    onSubscriptionData: ({ client, subscriptionData: { messageAdded } }) => {\n      client.writeFragment<Message.Fragment>({\n        id: defaultDataIdFromObject(messageAdded),\n        fragment: fragments.message,\n        data: messageAdded,\n      })\n\n      let fullChat\n      try {\n        fullChat = client.readFragment<FullChat.Fragment>({\n          id: defaultDataIdFromObject(messageAdded.chat),\n          fragment: fragments.fullChat,\n          fragmentName: 'FullChat',\n        })\n      } catch (e) {}\n\n      if (fullChat && !fullChat.messages.some(message => message.id === messageAdded.id)) {\n        fullChat.messages.push(messageAdded)\n        fullChat.lastMessage = messageAdded\n\n        client.writeFragment({\n          id: defaultDataIdFromObject(fullChat),\n          fragment: fragments.fullChat,\n          fragmentName: 'FullChat',\n          data: fullChat,\n        })\n      }\n\n      let chats\n      try {\n        chats = client.readQuery<Chats.Query>({\n          query: queries.chats,\n        }).chats\n      } catch (e) {}\n\n      if (chats) {\n        const index = chats.findIndex(chat => chat.id === messageAdded.chat.id)\n        const chat = chats[index]\n        chats.splice(index, 1)\n        chats.unshift(chat)\n\n        client.writeQuery({\n          query: queries.chats,\n          data: { chats },\n        })\n      }\n    },\n  })\n\n  useSubscription<UserAdded.Subscription>(subscriptions.userAdded, {\n    onSubscriptionData: ({ client, subscriptionData: { userAdded } }) => {\n      client.writeFragment({\n        id: defaultDataIdFromObject(userAdded),\n        fragment: fragments.user,\n        data: userAdded,\n      })\n\n      let users\n      try {\n        users = client.readQuery<Users.Query>({\n          query: queries.users,\n        }).users\n      } catch (e) {}\n\n      if (users && !users.some(user => user.id === userAdded.id)) {\n        users.push(userAdded)\n\n        client.writeQuery({\n          query: queries.users,\n          data: { users },\n        })\n      }\n    },\n  })\n\n  useSubscription<UserUpdated.Subscription>(subscriptions.userUpdated, {\n    onSubscriptionData: ({ client, subscriptionData: { userUpdated } }) => {\n      client.writeFragment({\n        id: defaultDataIdFromObject(userUpdated),\n        fragment: fragments.user,\n        data: userUpdated,\n      })\n    },\n  })\n}\n","import { InMemoryCache } from 'apollo-cache-inmemory'\nimport { ApolloClient } from 'apollo-client'\nimport { ApolloLink, split } from 'apollo-link'\nimport { setContext } from 'apollo-link-context'\nimport { HttpLink } from 'apollo-link-http'\nimport { WebSocketLink } from 'apollo-link-ws'\nimport { getMainDefinition } from 'apollo-utilities'\nimport { OperationDefinitionNode } from 'graphql'\nimport { getAuthHeader } from './services/auth.service'\n\nconst httpUri = process.env.REACT_APP_SERVER_URL + '/graphql'\nconst wsUri = httpUri.replace(/^https?/, 'ws')\n\nconst httpLink = new HttpLink({\n  uri: httpUri,\n})\n\nconst wsLink = new WebSocketLink({\n  uri: wsUri,\n  options: {\n    reconnect: true,\n    connectionParams: () => ({\n      authToken: getAuthHeader(),\n    }),\n  },\n})\n\nconst authLink = setContext((_, { headers }) => {\n  const auth = getAuthHeader()\n\n  return {\n    headers: {\n      ...headers,\n      Authorization: auth,\n    },\n  }\n})\n\nconst terminatingLink = split(\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(query) as OperationDefinitionNode\n    return kind === 'OperationDefinition' && operation === 'subscription'\n  },\n  wsLink,\n  authLink.concat(httpLink),\n)\n\nconst link = ApolloLink.from([terminatingLink])\n\nconst cache = new InMemoryCache()\n\nexport default new ApolloClient({\n  link,\n  cache,\n})\n","import styled from 'styled-components'\nimport { AnimatedSwitch, spring } from 'react-router-transition'\n\nconst glide = val =>\n  spring(val, {\n    stiffness: 174,\n    damping: 24,\n  })\n\nconst mapStyles = styles => ({\n  transform: `translateX(${styles.offset}%)`,\n})\n\nexport default styled(AnimatedSwitch).attrs(() => ({\n  atEnter: { offset: 100 },\n  atLeave: { offset: glide(-100) },\n  atActive: { offset: glide(0) },\n  mapStyles,\n}))`\n  position: relative;\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n\n  > div {\n    position: absolute;\n    overflow: hidden;\n    width: 100%;\n    height: 100%;\n  }\n`\n","import Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport { History } from 'history'\nimport * as React from 'react'\nimport { useState } from 'react'\nimport { signIn } from '../../services/auth.service'\n\ninterface SignInFormProps {\n  history: History\n}\n\nexport default ({ history }: SignInFormProps) => {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState('')\n\n  const onUsernameChange = ({ target }) => {\n    setError('')\n    setUsername(target.value)\n  }\n\n  const onPasswordChange = ({ target }) => {\n    setError('')\n    setPassword(target.value)\n  }\n\n  const maySignIn = () => {\n    return !!(username && password)\n  }\n\n  const handleSignIn = () => {\n    signIn({ username, password })\n      .then(() => {\n        history.push('/chats')\n      })\n      .catch(error => {\n        setError(error.message || error)\n      })\n  }\n\n  const handleSignUp = () => {\n    history.push('/sign-up')\n  }\n\n  return (\n    <div className=\"SignInForm Screen\">\n      <form>\n        <legend>Sign in</legend>\n        <div style={{ width: '100%' }}>\n          <TextField\n            className=\"AuthScreen-text-field\"\n            label=\"Username\"\n            value={username}\n            onChange={onUsernameChange}\n            margin=\"normal\"\n            placeholder=\"Enter your username\"\n          />\n          <TextField\n            className=\"AuthScreen-text-field\"\n            label=\"Password\"\n            type=\"password\"\n            value={password}\n            onChange={onPasswordChange}\n            margin=\"normal\"\n            placeholder=\"Enter your password\"\n          />\n        </div>\n        <Button\n          type=\"button\"\n          color=\"secondary\"\n          variant=\"contained\"\n          disabled={!maySignIn()}\n          onClick={handleSignIn}\n        >\n          Sign in\n        </Button>\n        <div className=\"AuthScreen-error\">{error}</div>\n        <span className=\"AuthScreen-alternative\">\n          Don't have an account yet? <a onClick={handleSignUp}>Sign up!</a>\n        </span>\n      </form>\n    </div>\n  )\n}\n","import Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport { History } from 'history'\nimport * as React from 'react'\nimport { useState } from 'react'\nimport { signUp } from '../../services/auth.service'\n\ninterface SignUpFormProps {\n  history: History\n}\n\nexport default ({ history }: SignUpFormProps) => {\n  const [name, setName] = useState('')\n  const [username, setUsername] = useState('')\n  const [oldPassword, setOldPassword] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState('')\n\n  const updateName = ({ target }) => {\n    setError('')\n    setName(target.value)\n  }\n\n  const updateUsername = ({ target }) => {\n    setError('')\n    setUsername(target.value)\n  }\n\n  const updateOldPassword = ({ target }) => {\n    setError('')\n    setOldPassword(target.value)\n  }\n\n  const updateNewPassword = ({ target }) => {\n    setError('')\n    setPassword(target.value)\n  }\n\n  const maySignUp = () => {\n    return !!(name && username && oldPassword && oldPassword === password)\n  }\n\n  const handleSignUp = () => {\n    signUp({ username, password, name })\n      .then(() => {\n        history.push('/sign-in')\n      })\n      .catch(error => {\n        setError(error.message || error)\n      })\n  }\n\n  const handleSignIn = () => {\n    history.push('/sign-in')\n  }\n\n  return (\n    <div className=\"SignUpForm Screen\">\n      <form>\n        <legend>Sign up</legend>\n        <div\n          style={{\n            float: 'left',\n            width: 'calc(50% - 10px)',\n            paddingRight: '10px',\n          }}\n        >\n          <TextField\n            className=\"AuthScreen-text-field\"\n            label=\"Name\"\n            value={name}\n            onChange={updateName}\n            autoComplete=\"off\"\n            margin=\"normal\"\n          />\n          <TextField\n            className=\"AuthScreen-text-field\"\n            label=\"Username\"\n            value={username}\n            onChange={updateUsername}\n            autoComplete=\"off\"\n            margin=\"normal\"\n          />\n        </div>\n        <div\n          style={{\n            float: 'right',\n            width: 'calc(50% - 10px)',\n            paddingLeft: '10px',\n          }}\n        >\n          <TextField\n            className=\"AuthScreen-text-field\"\n            label=\"Old password\"\n            type=\"password\"\n            value={oldPassword}\n            onChange={updateOldPassword}\n            autoComplete=\"off\"\n            margin=\"normal\"\n          />\n          <TextField\n            className=\"AuthScreen-text-field\"\n            label=\"New password\"\n            type=\"password\"\n            value={password}\n            onChange={updateNewPassword}\n            autoComplete=\"off\"\n            margin=\"normal\"\n          />\n        </div>\n        <Button\n          type=\"button\"\n          color=\"secondary\"\n          variant=\"contained\"\n          disabled={!maySignUp()}\n          onClick={handleSignUp}\n        >\n          Sign up\n        </Button>\n        <div className=\"AuthScreen-error\">{error}</div>\n        <span className=\"AuthScreen-alternative\">\n          Already have an accout? <a onClick={handleSignIn}>Sign in!</a>\n        </span>\n      </form>\n    </div>\n  )\n}\n","import * as React from 'react'\nimport { RouteComponentProps } from 'react-router-dom'\nimport { Route } from 'react-router-dom'\nimport styled from 'styled-components'\nimport AnimatedSwitch from '../AnimatedSwitch'\nimport SignInForm from './SignInForm'\nimport SignUpForm from './SignUpForm'\n\nconst Style = styled.div`\n  background: radial-gradient(rgb(34, 65, 67), rgb(17, 48, 50)),\n    url(/assets/chat-background.jpg) no-repeat;\n  background-size: cover;\n  background-blend-mode: multiply;\n  color: white;\n\n  .AuthScreen-intro {\n    height: 265px;\n  }\n\n  .AuthScreen-icon {\n    width: 125px;\n    height: auto;\n    margin-left: auto;\n    margin-right: auto;\n    padding-top: 70px;\n    display: block;\n  }\n\n  .AuthScreen-title {\n    width: 100%;\n    text-align: center;\n    color: white;\n  }\n\n  .AuthScreen-text-field {\n    width: 100%;\n    position: relative;\n  }\n\n  .AuthScreen-text-field > div::before {\n    border-color: white !important;\n  }\n\n  .AuthScreen-error {\n    position: absolute;\n    color: red;\n    font-size: 15px;\n    margin-top: 20px;\n  }\n\n  .AuthScreen-alternative {\n    position: absolute;\n    bottom: 10px;\n    left: 10px;\n\n    a {\n      color: var(--secondary-bg);\n    }\n  }\n\n  .Screen {\n    height: calc(100% - 265px);\n  }\n\n  form {\n    padding: 20px;\n\n    > div {\n      padding-bottom: 35px;\n    }\n  }\n\n  legend {\n    font-weight: bold;\n    color: white;\n  }\n\n  label {\n    color: white !important;\n  }\n\n  input {\n    color: white;\n\n    &::placeholder {\n      color: var(--primary-bg);\n    }\n  }\n\n  button {\n    width: 100px;\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n    background-color: var(--secondary-bg) !important;\n\n    &[disabled] {\n      color: #38a81c;\n    }\n\n    &:not([disabled]) {\n      color: white;\n    }\n  }\n`\n\nexport default ({ history, location }: RouteComponentProps) => (\n  <Style className=\"AuthScreen Screen\">\n    <div className=\"AuthScreen-intro\">\n      <img src=\"assets/whatsapp-icon.png\" className=\"AuthScreen-icon\" />\n      <h2 className=\"AuthScreen-title\">WhatsApp Clone</h2>\n    </div>\n    <AnimatedSwitch>\n      <Route exact path=\"/sign-in\" component={SignInForm} />\n      <Route exact path=\"/sign-up\" component={SignUpForm} />\n    </AnimatedSwitch>\n  </Style>\n)\n","import Toolbar from '@material-ui/core/Toolbar'\nimport * as React from 'react'\nimport styled from 'styled-components'\n\nconst name = 'Navbar'\n\nconst Style = styled(Toolbar)`\n  background-color: var(--primary-bg);\n  color: var(--primary-text);\n  font-size: 20px;\n  line-height: 40px;\n\n  .${name}-body {\n    width: 100%;\n  }\n`\n\ninterface NavbarProps {\n  children: any\n}\n\nexport default ({ children }: NavbarProps) => (\n  <Style className={`${name}`}>\n    <div className={`${name}-body`}>{children}</div>\n  </Style>\n)\n","import Button from '@material-ui/core/Button'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport Popover from '@material-ui/core/Popover'\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport InfoIcon from '@material-ui/icons/Info'\nimport MoreIcon from '@material-ui/icons/MoreVert'\nimport { defaultDataIdFromObject } from 'apollo-cache-inmemory'\nimport gql from 'graphql-tag'\nimport { History } from 'history'\nimport * as React from 'react'\nimport { useState } from 'react'\nimport { useQuery, useMutation } from 'react-apollo-hooks'\nimport styled from 'styled-components'\nimport * as fragments from '../../graphql/fragments'\nimport * as queries from '../../graphql/queries'\nimport { ChatNavbarMutation, ChatNavbarQuery, Chats } from '../../graphql/types'\n\nconst Style = styled.div`\n  padding: 0;\n  display: flex;\n  flex-direction: row;\n  margin-left: -20px;\n\n  .ChatNavbar-title {\n    line-height: 56px;\n  }\n\n  .ChatNavbar-back-button {\n    color: var(--primary-text);\n  }\n\n  .ChatNavbar-picture {\n    height: 40px;\n    width: 40px;\n    margin-top: 3px;\n    margin-left: -22px;\n    object-fit: cover;\n    padding: 5px;\n    border-radius: 50%;\n  }\n\n  .ChatNavbar-rest {\n    flex: 1;\n    justify-content: flex-end;\n  }\n\n  .ChatNavbar-options-btn {\n    float: right;\n    height: 100%;\n    font-size: 1.2em;\n    margin-right: -15px;\n    color: var(--primary-text);\n  }\n\n  .ChatNavbar-options-item svg {\n    margin-right: 10px;\n    padding-left: 15px;\n  }\n`\n\nconst query = gql`\n  query ChatNavbarQuery($chatId: ID!) {\n    chat(chatId: $chatId) {\n      ...Chat\n    }\n  }\n  ${fragments.chat}\n`\n\nconst mutation = gql`\n  mutation ChatNavbarMutation($chatId: ID!) {\n    removeChat(chatId: $chatId)\n  }\n`\n\ninterface ChatNavbarProps {\n  chatId: string\n  history: History\n}\n\nexport default ({ chatId, history }: ChatNavbarProps) => {\n  const {\n    data: { chat },\n  } = useQuery<ChatNavbarQuery.Query, ChatNavbarQuery.Variables>(query, {\n    variables: { chatId },\n  })\n  const removeChat = useMutation<ChatNavbarMutation.Mutation, ChatNavbarMutation.Variables>(\n    mutation,\n    {\n      variables: { chatId },\n      update: (client, { data: { removeChat } }) => {\n        client.writeFragment({\n          id: defaultDataIdFromObject({\n            __typename: 'Chat',\n            id: removeChat,\n          }),\n          fragment: fragments.chat,\n          fragmentName: 'Chat',\n          data: null,\n        })\n\n        let chats\n        try {\n          chats = client.readQuery<Chats.Query>({\n            query: queries.chats,\n          }).chats\n        } catch (e) {}\n\n        if (chats && chats.some(chat => chat.id === removeChat)) {\n          const index = chats.findIndex(chat => chat.id === removeChat)\n          chats.splice(index, 1)\n\n          client.writeQuery({\n            query: queries.chats,\n            data: { chats },\n          })\n        }\n      },\n    },\n  )\n  const [popped, setPopped] = useState(false)\n\n  const navToChats = () => {\n    history.push('/chats')\n  }\n\n  const navToGroupDetails = () => {\n    setPopped(false)\n    history.push(`/chats/${chatId}/details`, { chat })\n  }\n\n  const handleRemoveChat = () => {\n    setPopped(false)\n    removeChat().then(navToChats)\n  }\n\n  return (\n    <Style className={name}>\n      <Button className=\"ChatNavbar-back-button\" onClick={navToChats}>\n        <ArrowBackIcon />\n      </Button>\n      <img\n        className=\"ChatNavbar-picture\"\n        src={\n          chat.picture ||\n          (chat.isGroup ? '/assets/default-group-pic.jpg' : '/assets/default-profile-pic.jpg')\n        }\n      />\n      <div className=\"ChatNavbar-title\">{chat.name}</div>\n      <div className=\"ChatNavbar-rest\">\n        <Button className=\"ChatNavbar-options-btn\" onClick={setPopped.bind(null, true)}>\n          <MoreIcon />\n        </Button>\n      </div>\n      <Popover\n        open={popped}\n        onClose={setPopped.bind(null, false)}\n        anchorOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n      >\n        <Style style={{ marginLeft: '-15px' }}>\n          <List>\n            {chat.isGroup && (\n              <ListItem className=\"ChatNavbar-options-item\" button onClick={navToGroupDetails}>\n                <InfoIcon />\n                Details\n              </ListItem>\n            )}\n            <ListItem className=\"ChatNavbar-options-item\" button onClick={handleRemoveChat}>\n              <DeleteIcon />\n              Delete\n            </ListItem>\n          </List>\n        </Style>\n      </Popover>\n    </Style>\n  )\n}\n","import Button from '@material-ui/core/Button'\nimport SendIcon from '@material-ui/icons/Send'\nimport { defaultDataIdFromObject } from 'apollo-cache-inmemory'\nimport gql from 'graphql-tag'\nimport * as React from 'react'\nimport { useState } from 'react'\nimport { useQuery, useMutation } from 'react-apollo-hooks'\nimport styled from 'styled-components'\nimport { time as uniqid } from 'uniqid'\nimport * as fragments from '../../graphql/fragments'\nimport { MessageBoxMutation, FullChat, Message } from '../../graphql/types'\nimport { useMe } from '../../services/auth.service'\n\nconst Style = styled.div`\n  display: flex;\n  height: 50px;\n  padding: 5px;\n  width: calc(100% - 10px);\n\n  .MessageBox-input {\n    width: calc(100% - 50px);\n    border: none;\n    border-radius: 999px;\n    padding: 10px;\n    padding-left: 20px;\n    padding-right: 20px;\n    font-size: 15px;\n    outline: none;\n    box-shadow: 0 1px silver;\n    font-size: 18px;\n    line-height: 45px;\n  }\n\n  .MessageBox-button {\n    min-width: 50px;\n    width: 50px;\n    border-radius: 999px;\n    background-color: var(--primary-bg);\n    margin: 0 5px;\n    margin-right: 0;\n    color: white;\n    padding-left: 20px;\n\n    svg {\n      margin-left: -3px;\n    }\n  }\n`\n\nconst mutation = gql`\n  mutation MessageBoxMutation($chatId: ID!, $content: String!) {\n    addMessage(chatId: $chatId, content: $content) {\n      ...Message\n    }\n  }\n  ${fragments.message}\n`\n\ninterface MessageBoxProps {\n  chatId: string\n}\n\nexport default ({ chatId }: MessageBoxProps) => {\n  const [message, setMessage] = useState('')\n  const me = useMe()\n\n  const addMessage = useMutation<MessageBoxMutation.Mutation, MessageBoxMutation.Variables>(\n    mutation,\n    {\n      variables: {\n        chatId,\n        content: message,\n      },\n      optimisticResponse: {\n        __typename: 'Mutation',\n        addMessage: {\n          id: uniqid(),\n          __typename: 'Message',\n          chat: {\n            id: chatId,\n            __typename: 'Chat',\n          },\n          sender: {\n            id: me.id,\n            __typename: 'User',\n            name: me.name,\n          },\n          content: message,\n          createdAt: new Date(),\n          type: 0,\n          recipients: [],\n          ownership: true,\n        },\n      },\n      update: (client, { data: { addMessage } }) => {\n        client.writeFragment({\n          id: defaultDataIdFromObject(addMessage),\n          fragment: fragments.message,\n          data: addMessage,\n        })\n\n        let fullChat\n        try {\n          fullChat = client.readFragment<FullChat.Fragment>({\n            id: defaultDataIdFromObject(addMessage.chat),\n            fragment: fragments.fullChat,\n            fragmentName: 'FullChat',\n          })\n        } catch (e) {}\n\n        if (fullChat && !fullChat.messages.some(message => message.id === addMessage.id)) {\n          fullChat.messages.push(addMessage)\n          fullChat.lastMessage = addMessage\n\n          client.writeFragment({\n            id: defaultDataIdFromObject(addMessage.chat),\n            fragment: fragments.fullChat,\n            fragmentName: 'FullChat',\n            data: fullChat,\n          })\n        }\n      },\n    },\n  )\n\n  const onKeyPress = e => {\n    if (e.charCode === 13) {\n      submitMessage()\n    }\n  }\n\n  const onChange = ({ target }) => {\n    setMessage(target.value)\n  }\n\n  const submitMessage = () => {\n    if (!message) return\n\n    addMessage()\n    setMessage('')\n  }\n\n  return (\n    <Style className=\"MessageBox\">\n      <input\n        className=\"MessageBox-input\"\n        type=\"text\"\n        placeholder=\"Type a message\"\n        value={message}\n        onKeyPress={onKeyPress}\n        onChange={onChange}\n      />\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className=\"MessageBox-button\"\n        onClick={submitMessage}\n      >\n        <SendIcon />\n      </Button>\n    </Style>\n  )\n}\n","import gql from 'graphql-tag'\nimport * as moment from 'moment'\nimport * as React from 'react'\nimport { useRef, useEffect } from 'react'\nimport { useQuery, useMutation } from 'react-apollo-hooks'\nimport * as ReactDOM from 'react-dom'\nimport styled from 'styled-components'\nimport * as fragments from '../../graphql/fragments'\nimport { MessagesListQuery } from '../../graphql/types'\n\nconst Style = styled.div`\n  display: block;\n  height: calc(100% - 60px);\n  width: calc(100% - 30px);\n  overflow-y: overlay;\n  padding: 0 15px;\n\n  .MessagesList-message {\n    display: inline-block;\n    position: relative;\n    max-width: 100%;\n    border-radius: 7px;\n    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.15);\n    margin-top: 10px;\n    margin-bottom: 10px;\n    clear: both;\n\n    &::after {\n      content: '';\n      display: table;\n      clear: both;\n    }\n  }\n\n  .MessagesList-message-mine {\n    float: right;\n    background-color: #dcf8c6;\n\n    &::before {\n      right: -11px;\n      background-image: url(/assets/message-mine.png);\n    }\n  }\n\n  .MessagesList-message-others {\n    float: left;\n    background-color: #fff;\n\n    &::before {\n      left: -11px;\n      background-image: url(/assets/message-other.png);\n    }\n  }\n\n  .MessagesList-message-others::before,\n  .MessagesList-message-mine::before {\n    content: '';\n    position: absolute;\n    bottom: 3px;\n    width: 12px;\n    height: 19px;\n    background-position: 50% 50%;\n    background-repeat: no-repeat;\n    background-size: contain;\n  }\n\n  .MessagesList-message-sender {\n    font-weight: bold;\n    margin-left: 5px;\n    margin-top: 5px;\n  }\n\n  .MessagesList-message-contents {\n    padding: 5px 7px;\n    word-wrap: break-word;\n\n    &::after {\n      content: ' \\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0';\n      display: inline;\n    }\n  }\n\n  .MessagesList-message-timestamp {\n    position: absolute;\n    bottom: 2px;\n    right: 7px;\n    color: gray;\n    font-size: 12px;\n  }\n`\n\nconst query = gql`\n  query MessagesListQuery($chatId: ID!) {\n    chat(chatId: $chatId) {\n      ...FullChat\n    }\n  }\n  ${fragments.fullChat}\n`\n\ninterface MessagesListProps {\n  chatId: string\n}\n\nexport default ({ chatId }: MessagesListProps) => {\n  const {\n    data: {\n      chat: { messages, isGroup },\n    },\n  } = useQuery<MessagesListQuery.Query, MessagesListQuery.Variables>(query, {\n    variables: { chatId },\n  })\n  const selfRef = useRef(null)\n\n  const resetScrollTop = () => {\n    if (!selfRef.current) return\n\n    const selfDOMNode = ReactDOM.findDOMNode(selfRef.current) as HTMLElement\n    selfDOMNode.scrollTop = Number.MAX_SAFE_INTEGER\n  }\n\n  useEffect(resetScrollTop, [selfRef.current])\n  useEffect(resetScrollTop, [messages.length])\n\n  return (\n    <Style className={name} ref={selfRef}>\n      {messages &&\n        messages.map(message => (\n          <div\n            key={message.id}\n            className={`MessagesList-message ${\n              message.ownership ? 'MessagesList-message-mine' : 'MessagesList-message-others'\n            }`}\n          >\n            {isGroup && !message.ownership && (\n              <div className=\"MessagesList-message-sender\">{message.sender.name}</div>\n            )}\n            <div className=\"MessagesList-message-contents\">{message.content}</div>\n            <span className=\"MessagesList-message-timestamp\">\n              {moment(message.createdAt).format('HH:mm')}\n            </span>\n          </div>\n        ))}\n    </Style>\n  )\n}\n","import * as React from 'react'\nimport { Suspense } from 'react'\nimport { RouteComponentProps } from 'react-router-dom'\nimport styled from 'styled-components'\nimport Navbar from '../Navbar'\nimport ChatNavbar from './ChatNavbar'\nimport MessageBox from './MessageBox'\nimport MessagesList from './MessagesList'\n\nconst Style = styled.div`\n  .ChatScreen-body {\n    position: relative;\n    background: url(/assets/chat-background.jpg);\n    width: 100%;\n    height: calc(100% - 56px);\n\n    .MessagesList {\n      position: absolute;\n      height: calc(100% - 60px);\n      top: 0;\n    }\n\n    .MessageBox {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n    }\n\n    .AddChatButton {\n      right: 0;\n      bottom: 0;\n    }\n  }\n`\n\nexport default ({ match, history }: RouteComponentProps) => {\n  const chatId = match.params.chatId\n\n  return (\n    <Style className=\"ChatScreen Screen\">\n      <Navbar>\n        <Suspense fallback={null}>\n          <ChatNavbar chatId={chatId} history={history} />\n        </Suspense>\n      </Navbar>\n      <div className=\"ChatScreen-body\">\n        <Suspense fallback={null}>\n          <MessagesList chatId={chatId} />\n        </Suspense>\n        <Suspense fallback={null}>\n          <MessageBox chatId={chatId} />\n        </Suspense>\n      </div>\n    </Style>\n  )\n}\n","import Button from '@material-ui/core/Button'\nimport ChatIcon from '@material-ui/icons/Chat'\nimport { History } from 'history'\nimport * as React from 'react'\nimport styled from 'styled-components'\n\nconst Style = styled.div`\n  position: fixed;\n  right: 10px;\n  bottom: 10px;\n\n  button {\n    min-width: 50px;\n    width: 50px;\n    height: 50px;\n    border-radius: 999px;\n    background-color: var(--secondary-bg);\n    color: white;\n  }\n`\n\ninterface AddChatButtonProps {\n  history: History\n}\n\nexport default ({ history }: AddChatButtonProps) => {\n  const onClick = () => {\n    history.push('/new-chat')\n  }\n\n  return (\n    <Style className=\"AddChatButton\">\n      <Button variant=\"contained\" color=\"secondary\" onClick={onClick}>\n        <ChatIcon />\n      </Button>\n    </Style>\n  )\n}\n","import List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport gql from 'graphql-tag'\nimport { History } from 'history'\nimport * as moment from 'moment'\nimport * as React from 'react'\nimport { useQuery } from 'react-apollo-hooks'\nimport * as ReactDOM from 'react-dom'\nimport styled from 'styled-components'\nimport * as fragments from '../../graphql/fragments'\nimport { useSubscription } from '../../polyfills/react-apollo-hooks'\nimport { ChatsListQuery } from '../../graphql/types'\n\nconst Style = styled.div`\n  height: calc(100% - 56px);\n  overflow-y: overlay;\n\n  .ChatsList-chats-list {\n    padding: 0;\n  }\n\n  .ChatsList-chat-item {\n    height: 76px;\n    padding: 0 15px;\n    display: flex;\n  }\n\n  .ChatsList-profile-pic {\n    height: 50px;\n    width: 50px;\n    object-fit: cover;\n    border-radius: 50%;\n  }\n\n  .ChatsList-info {\n    width: calc(100% - 60px);\n    height: calc(100% - 30px);\n    padding: 15px 0;\n    margin-left: 10px;\n    border-bottom: 0.5px solid silver;\n    position: relative;\n  }\n\n  .ChatsList-name {\n    margin-top: 5px;\n  }\n\n  .ChatsList-last-message {\n    color: gray;\n    font-size: 15px;\n    margin-top: 5px;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: nowrap;\n  }\n\n  .ChatsList-timestamp {\n    position: absolute;\n    color: gray;\n    top: 20px;\n    right: 0;\n    font-size: 13px;\n  }\n`\n\nconst query = gql`\n  query ChatsListQuery {\n    chats {\n      ...Chat\n    }\n  }\n  ${fragments.chat}\n`\n\ninterface ChatsListProps {\n  history: History\n}\n\nexport default ({ history }: ChatsListProps) => {\n  const {\n    data: { chats },\n  } = useQuery<ChatsListQuery.Query>(query)\n  const chatsIds = chats.map(chat => chat.id)\n\n  const navToChat = chatId => {\n    history.push(`chats/${chatId}`)\n  }\n\n  return (\n    <Style className=\"ChatsList\">\n      <List className=\"ChatsList-chats-list\">\n        {chats && chats.map(chat => (\n          <ListItem\n            key={chat.id}\n            className=\"ChatsList-chat-item\"\n            button\n            onClick={navToChat.bind(null, chat.id)}\n          >\n            <img\n              className=\"ChatsList-profile-pic\"\n              src={\n                chat.picture ||\n                (chat.isGroup\n                  ? '/assets/default-group-pic.jpg'\n                  : '/assets/default-profile-pic.jpg')\n              }\n            />\n            <div className=\"ChatsList-info\">\n              <div className=\"ChatsList-name\">{chat.name}</div>\n              {chat.lastMessage && (\n                <React.Fragment>\n                  <div className=\"ChatsList-last-message\">{chat.lastMessage.content}</div>\n                  <div className=\"ChatsList-timestamp\">\n                    {moment(chat.lastMessage.createdAt).format('HH:mm')}\n                  </div>\n                </React.Fragment>\n              )}\n            </div>\n          </ListItem>\n        ))}\n      </List>\n    </Style>\n  )\n}\n","import Button from '@material-ui/core/Button'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport Popover from '@material-ui/core/Popover'\nimport MoreIcon from '@material-ui/icons/MoreVert'\nimport SignOutIcon from '@material-ui/icons/PowerSettingsNew'\nimport SettingsIcon from '@material-ui/icons/Settings'\nimport { History } from 'history'\nimport * as React from 'react'\nimport { useState } from 'react'\nimport styled from 'styled-components'\nimport { signOut } from '../../services/auth.service'\n\nconst Style = styled.div`\n  padding: 0;\n  display: flex;\n  flex-direction: row;\n\n  .ChatsNavbar-title {\n    line-height: 56px;\n  }\n\n  .ChatsNavbar-options-btn {\n    float: right;\n    height: 100%;\n    font-size: 1.2em;\n    margin-right: -15px;\n    color: var(--primary-text);\n  }\n\n  .ChatsNavbar-rest {\n    flex: 1;\n    justify-content: flex-end;\n  }\n\n  .ChatsNavbar-options-item svg {\n    margin-right: 10px;\n  }\n`\n\ninterface ChatsNavbarProps {\n  history: History\n}\n\nexport default ({ history }: ChatsNavbarProps) => {\n  const [popped, setPopped] = useState(false)\n\n  const navToSettings = () => {\n    setPopped(false)\n    history.push('/settings')\n  }\n\n  const handleSignOut = () => {\n    setPopped(false)\n    signOut()\n\n    history.push('/sign-in')\n  }\n\n  return (\n    <Style className=\"ChatsNavbar\">\n      <span className=\"ChatsNavbar-title\">WhatsApp Clone</span>\n      <div className=\"ChatsNavbar-rest\">\n        <Button className=\"ChatsNavbar-options-btn\" onClick={setPopped.bind(null, true)}>\n          <MoreIcon />\n        </Button>\n      </div>\n      <Popover\n        open={popped}\n        onClose={setPopped.bind(null, false)}\n        anchorOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n      >\n        <Style>\n          <List>\n            <ListItem className=\"ChatsNavbar-options-item\" button onClick={navToSettings}>\n              <SettingsIcon />\n              Settings\n            </ListItem>\n            <ListItem className=\"ChatsNavbar-options-item\" button onClick={handleSignOut}>\n              <SignOutIcon />\n              Sign Out\n            </ListItem>\n          </List>\n        </Style>\n      </Popover>\n    </Style>\n  )\n}\n","import * as React from 'react'\nimport { Suspense } from 'react'\nimport { RouteComponentProps } from 'react-router-dom'\nimport Navbar from '../Navbar'\nimport AddChatButton from './AddChatButton'\nimport ChatsList from './ChatsList'\nimport ChatsNavbar from './ChatsNavbar'\n\nexport default ({ history }: RouteComponentProps) => (\n  <div className=\"ChatsListScreen Screen\">\n    <Navbar>\n      <ChatsNavbar history={history} />\n    </Navbar>\n    <Suspense fallback={null}>\n      <ChatsList history={history} />\n    </Suspense>\n    <AddChatButton history={history} />\n  </div>\n)\n","import { getAuthHeader } from \"./auth.service\";\n\nexport const pickPicture = () => {\n  return new Promise((resolve, reject) => {\n    const input = document.createElement('input')\n    input.type = 'file'\n    input.accept = 'image/*'\n    input.onchange = e => {\n      const target = e.target as HTMLInputElement\n      resolve(target.files[0])\n    }\n    input.onerror = reject\n    input.click()\n  })\n}\n\nexport const uploadProfilePicture = file => {\n  const formData = new FormData()\n  formData.append('file', file)\n  formData.append('upload_preset', 'profile-pic')\n\n  return fetch(`${process.env.REACT_APP_SERVER_URL}/upload-profile-pic`, {\n    method: 'POST',\n    body: formData,\n    headers: {\n      Authorization: getAuthHeader(),\n    }\n  }).then(res => {\n    return res.json()\n  })\n}\n","import Button from '@material-ui/core/Button'\nimport ArrowRightIcon from '@material-ui/icons/ArrowRightAlt'\nimport { defaultDataIdFromObject } from 'apollo-cache-inmemory'\nimport gql from 'graphql-tag'\nimport { History } from 'history'\nimport * as React from 'react'\nimport { useMutation } from 'react-apollo-hooks'\nimport styled from 'styled-components'\nimport * as fragments from '../../graphql/fragments'\nimport * as queries from '../../graphql/queries'\nimport { Chats } from '../../graphql/types'\nimport { User, CompleteGroupButtonMutation } from '../../graphql/types'\n\nconst Style = styled.div`\n  position: fixed;\n  right: 10px;\n  bottom: 10px;\n\n  button {\n    min-width: 50px;\n    width: 50px;\n    height: 50px;\n    border-radius: 999px;\n    background-color: var(--secondary-bg);\n    color: white;\n  }\n`\n\nconst mutation = gql`\n  mutation CompleteGroupButtonMutation(\n    $userIds: [ID!]!\n    $groupName: String!\n    $groupPicture: String\n  ) {\n    addGroup(userIds: $userIds, groupName: $groupName, groupPicture: $groupPicture) {\n      ...Chat\n    }\n  }\n  ${fragments.chat}\n`\n\ninterface CompleteGroupButtonProps {\n  history: History\n  users: User.Fragment[]\n  groupName: string\n  groupPicture: string\n}\n\nexport default ({ history, users, groupName, groupPicture }: CompleteGroupButtonProps) => {\n  const addGroup = useMutation<\n    CompleteGroupButtonMutation.Mutation,\n    CompleteGroupButtonMutation.Variables\n  >(mutation, {\n    variables: {\n      userIds: users.map(user => user.id),\n      groupName,\n      groupPicture,\n    },\n    update: (client, { data: { addGroup } }) => {\n      client.writeFragment({\n        id: defaultDataIdFromObject(addGroup),\n        fragment: fragments.chat,\n        fragmentName: 'Chat',\n        data: addGroup,\n      })\n\n      let chats\n      try {\n        chats = client.readQuery<Chats.Query>({\n          query: queries.chats,\n        }).chats\n      } catch (e) {}\n\n      if (chats && !chats.some(chat => chat.id === addGroup.id)) {\n        chats.unshift(addGroup)\n\n        client.writeQuery({\n          query: queries.chats,\n          data: { chats },\n        })\n      }\n    },\n  })\n\n  const onClick = () => {\n    addGroup().then(() => {\n      history.push('/chats')\n    })\n  }\n\n  return (\n    <Style className=\"CompleteGroupButton\">\n      <Button variant=\"contained\" color=\"secondary\" onClick={onClick}>\n        <ArrowRightIcon />\n      </Button>\n    </Style>\n  )\n}\n","import Button from '@material-ui/core/Button'\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack'\nimport { History } from 'history'\nimport * as React from 'react'\nimport styled from 'styled-components'\n\nconst name = 'GroupDetailsNavbar'\n\nconst Style = styled.div`\n  padding: 0;\n  display: flex;\n  flex-direction: row;\n  margin-left: -20px;\n\n  .GroupDetailsNavbar-title {\n    line-height: 56px;\n  }\n\n  .GroupDetailsNavbar-back-button {\n    color: var(--primary-text);\n  }\n`\n\ninterface GroupDetailsNavbarProps {\n  history: History\n  chatId?: string\n}\n\nexport default ({ history, chatId }: GroupDetailsNavbarProps) => {\n  const navToNewGroup = () => {\n    if (chatId) {\n      history.push(`/chats/${chatId}`)\n    } else {\n      history.push('/new-chat/group')\n    }\n  }\n\n  return (\n    <Style className={name}>\n      <Button className=\"GroupDetailsNavbar-back-button\" onClick={navToNewGroup}>\n        <ArrowBackIcon />\n      </Button>\n      <div className=\"GroupDetailsNavbar-title\">Group Details</div>\n    </Style>\n  )\n}\n","import TextField from '@material-ui/core/TextField'\nimport { defaultDataIdFromObject } from 'apollo-cache-inmemory'\nimport gql from 'graphql-tag'\nimport * as React from 'react'\nimport { useState, useEffect } from 'react'\nimport { MutationHookOptions } from 'react-apollo-hooks'\nimport { useQuery, useMutation } from 'react-apollo-hooks'\nimport { Redirect } from 'react-router-dom'\nimport { RouteComponentProps } from 'react-router-dom'\nimport styled from 'styled-components'\nimport * as fragments from '../../graphql/fragments'\nimport { GroupDetailsScreenQuery, GroupDetailsScreenMutation, User } from '../../graphql/types'\nimport { useMe } from '../../services/auth.service'\nimport { pickPicture, uploadProfilePicture } from '../../services/picture.service'\nimport Navbar from '../Navbar'\nimport CompleteGroupButton from './CompleteGroupButton'\nimport GroupDetailsNavbar from './GroupDetailsNavbar'\n\nconst Style = styled.div`\n  .GroupDetailsScreen-group-name {\n    width: calc(100% - 30px);\n    margin: 15px;\n  }\n\n  .GroupDetailsScreen-participants-title {\n    margin-top: 10px;\n    margin-left: 15px;\n  }\n\n  .GroupDetailsScreen-participants-list {\n    display: flex;\n    overflow: overlay;\n    padding: 0;\n  }\n\n  .GroupDetailsScreen-participant-item {\n    padding: 10px;\n    flex-flow: row wrap;\n    text-align: center;\n  }\n\n  .GroupDetailsScreen-participant-picture {\n    flex: 0 1 50px;\n    height: 50px;\n    width: 50px;\n    object-fit: cover;\n    border-radius: 50%;\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n  }\n\n  .GroupDetailsScreen-group-info {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n  }\n\n  .GroupDetailsScreen-participant-name {\n    line-height: 10px;\n    font-size: 14px;\n  }\n\n  .GroupDetailsScreen-group-picture {\n    width: 50px;\n    flex-basis: 50px;\n    border-radius: 50%;\n    margin-left: 15px;\n    object-fit: cover;\n    ${props => props.ownedByMe && 'cursor: pointer;'}\n  }\n`\n\nconst query = gql`\n  query GroupDetailsScreenQuery($chatId: ID!) {\n    chat(chatId: $chatId) {\n      ...Chat\n    }\n  }\n  ${fragments.chat}\n`\n\nconst mutation = gql`\n  mutation GroupDetailsScreenMutation($chatId: ID!, $name: String, $picture: String) {\n    updateChat(chatId: $chatId, name: $name, picture: $picture) {\n      ...Chat\n    }\n  }\n  ${fragments.chat}\n`\n\nexport default ({ location, match, history }: RouteComponentProps) => {\n  const chatId = match.params.chatId\n  const me = useMe()\n\n  let ownedByMe: boolean\n  let users: User.Fragment[]\n  let participants: User.Fragment[]\n  let updateChat: () => any\n  let chatNameState\n  let chatPictureState\n\n  // The entire component functionality will be determined by the provided route param\n  if (chatId) {\n    const {\n      data: { chat },\n    } = useQuery<GroupDetailsScreenQuery.Query, GroupDetailsScreenQuery.Variables>(query, {\n      variables: { chatId },\n    })\n    ownedByMe = chat.owner.id === me.id\n    users = chat.allTimeMembers\n    participants = users.slice()\n\n    // Read-only if not owned by me\n    if (ownedByMe) {\n      chatNameState = useState(chat.name)\n      chatPictureState = useState(chat.picture)\n    } else {\n      chatNameState = [chat.name, () => {}]\n      chatPictureState = [chat.picture, () => {}]\n    }\n\n    const [chatName] = chatNameState\n    const [chatPicture] = chatPictureState\n\n    updateChat = useMutation<\n      GroupDetailsScreenMutation.Mutation,\n      GroupDetailsScreenMutation.Variables\n    >(mutation, {\n      variables: {\n        chatId,\n        name: chatName,\n        picture: chatPicture,\n      },\n      optimisticResponse: {\n        __typename: 'Mutation',\n        updateChat: {\n          ...chat,\n          __typename: 'Chat',\n          picture: chatPicture,\n          name: chatName,\n        },\n      },\n      update: (client, { data: { updateChat } }) => {\n        chat.picture = chatPicture\n        chat.name = chatName\n\n        client.writeFragment({\n          id: defaultDataIdFromObject(chat),\n          fragment: fragments.chat,\n          fragmentName: 'Chat',\n          data: chat,\n        })\n      },\n    })\n\n    // Update picture once changed\n    useEffect(\n      () => {\n        if (chatPicture !== chat.picture) {\n          updateChat()\n        }\n      },\n      [chatPicture],\n    )\n  } else {\n    ownedByMe = true\n    updateChat = () => {}\n    chatNameState = useState('')\n    chatPictureState = useState('')\n    users = location.state.users\n    participants = [me].concat(users)\n  }\n\n  // Users are missing from state\n  if (!(users instanceof Array)) {\n    return <Redirect to=\"/chats\" />\n  }\n\n  // Put me first\n  {\n    const index = participants.findIndex(participant => participant.id === me.id)\n    participants.splice(index, 1)\n    participants.unshift(me)\n  }\n\n  const [chatName, setChatName] = chatNameState\n  const [chatPicture, setChatPicture] = chatPictureState\n\n  const updateChatName = ({ target }) => {\n    setChatName(target.value)\n  }\n\n  const updateChatPicture = async () => {\n    // You have to be an admin\n    if (!ownedByMe) return\n\n    const file = await pickPicture()\n\n    if (!file) return\n\n    const { url } = await uploadProfilePicture(file)\n\n    setChatPicture(url)\n  }\n\n  return (\n    <Style className=\"GroupDetailsScreen Screen\" ownedByMe={ownedByMe}>\n      <Navbar>\n        <GroupDetailsNavbar chatId={chatId} history={history} />\n      </Navbar>\n      <div className=\"GroupDetailsScreen-group-info\">\n        <img\n          className=\"GroupDetailsScreen-group-picture\"\n          src={chatPicture || '/assets/default-group-pic.jpg'}\n          onClick={updateChatPicture}\n        />\n        <TextField\n          label=\"Group name\"\n          placeholder=\"Enter group name\"\n          className=\"GroupDetailsScreen-group-name\"\n          value={chatName}\n          onChange={updateChatName}\n          onBlur={updateChat}\n          disabled={!ownedByMe}\n          autoFocus={true}\n        />\n      </div>\n      <div className=\"GroupDetailsScreen-participants-title\">\n        Participants: {participants.length}\n      </div>\n      <ul className=\"GroupDetailsScreen-participants-list\">\n        {participants.map(participant => (\n          <div key={participant.id} className=\"GroupDetailsScreen-participant-item\">\n            <img\n              src={participant.picture || '/assets/default-profile-pic.jpg'}\n              className=\"GroupDetailsScreen-participant-picture\"\n            />\n            <span className=\"GroupDetailsScreen-participant-name\">{participant.name}</span>\n          </div>\n        ))}\n      </ul>\n      {!chatId && chatName && (\n        <CompleteGroupButton\n          history={history}\n          groupName={chatName}\n          groupPicture={chatPicture}\n          users={users}\n        />\n      )}\n    </Style>\n  )\n}\n","import List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport CheckCircle from '@material-ui/icons/CheckCircle'\nimport gql from 'graphql-tag'\nimport * as React from 'react'\nimport { useState } from 'react'\nimport { useQuery } from 'react-apollo-hooks'\nimport styled from 'styled-components'\nimport * as fragments from '../graphql/fragments'\nimport { UsersListQuery, User } from '../graphql/types'\n\nconst name = 'UsersList'\n\nconst Style = styled.div`\n  .UsersList-users-list {\n    padding: 0;\n  }\n\n  .UsersList-user-item {\n    position: relative;\n    padding: 7.5px 15px;\n    display: flex;\n    ${props => props.selectable && 'cursor: pointer;'}\n  }\n\n  .UsersList-profile-pic {\n    height: 50px;\n    width: 50px;\n    object-fit: cover;\n    border-radius: 50%;\n  }\n\n  .UsersList-name {\n    padding-left: 15px;\n    font-weight: bold;\n  }\n\n  .UsersList-checkmark {\n    position: absolute;\n    left: 50px;\n    top: 35px;\n    color: var(--secondary-bg);\n    background-color: white;\n    border-radius: 50%;\n  }\n`\n\nconst query = gql`\n  query UsersListQuery {\n    users {\n      ...User\n    }\n  }\n  ${fragments.user}\n`\n\ninterface UsersListProps {\n  selectable?: boolean\n  onSelectionChange?: (users: User.Fragment[]) => void\n  onUserPick?: (user: User.Fragment) => void\n}\n\nexport default (props: UsersListProps) => {\n  const { selectable, onSelectionChange, onUserPick } = {\n    selectable: false,\n    onSelectionChange: () => {},\n    onUserPick: () => {},\n    ...props,\n  }\n\n  const [selectedUsers, setSelectedUsers] = useState([])\n  const {\n    data: { users },\n  } = useQuery<UsersListQuery.Query>(query)\n\n  const onListItemClick = user => {\n    if (!selectable) {\n      return onUserPick(user)\n    }\n\n    if (selectedUsers.includes(user)) {\n      const index = selectedUsers.indexOf(user)\n      selectedUsers.splice(index, 1)\n    } else {\n      selectedUsers.push(user)\n    }\n\n    setSelectedUsers([...selectedUsers])\n    onSelectionChange(selectedUsers)\n  }\n\n  return (\n    <Style className={name} selectable={selectable}>\n      <List className=\"UsersList-users-list\">\n        {users &&\n          users.map(user => (\n            <ListItem\n              className=\"UsersList-user-item\"\n              key={user.id}\n              button\n              onClick={onListItemClick.bind(null, user)}\n            >\n              <img\n                className=\"UsersList-profile-pic\"\n                src={user.picture || '/assets/default-profile-pic.jpg'}\n              />\n              <div className=\"UsersList-name\">{user.name}</div>\n\n              {selectedUsers.includes(user) && <CheckCircle className=\"UsersList-checkmark\" />}\n            </ListItem>\n          ))}\n      </List>\n    </Style>\n  )\n}\n","import Button from '@material-ui/core/Button'\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack'\nimport { History } from 'history'\nimport * as React from 'react'\nimport styled from 'styled-components'\n\nconst name = 'NewChatNavbar'\n\nconst Style = styled.div`\n  padding: 0;\n  display: flex;\n  flex-direction: row;\n  margin-left: -20px;\n\n  .NewChatNavbar-title {\n    line-height: 56px;\n  }\n\n  .NewChatNavbar-back-button {\n    color: var(--primary-text);\n  }\n`\n\ninterface NewChatNavbarProps {\n  history: History\n}\n\nexport default ({ history }: NewChatNavbarProps) => {\n  const navToChats = () => {\n    history.push('/chats')\n  }\n\n  return (\n    <Style className={name}>\n      <Button className=\"NewChatNavbar-back-button\" onClick={navToChats}>\n        <ArrowBackIcon />\n      </Button>\n      <div className=\"NewChatNavbar-title\">New Chat</div>\n    </Style>\n  )\n}\n","import Button from '@material-ui/core/Button'\nimport GroupAddIcon from '@material-ui/icons/GroupAdd'\nimport { History } from 'history'\nimport * as React from 'react'\nimport styled from 'styled-components'\n\nconst Style = styled.div`\n  display: flex;\n  width: calc(100% - 9px);\n  padding-left: 9px;\n\n  button {\n    text-transform: none;\n    font-size: inherit;\n    width: 100%;\n    justify-content: flex-start;\n\n    svg {\n      font-size: 30px;\n      margin-top: 10px;\n    }\n  }\n\n  .NewGroupButton-icon {\n    height: 50px;\n    width: 50px;\n    object-fit: cover;\n    border-radius: 50%;\n    color: white;\n    background-color: var(--secondary-bg);\n  }\n\n  .NewGroupButton-title {\n    padding-left: 15px;\n    font-weight: bold;\n  }\n`\n\ninterface NewGroupButtonProps {\n  history: History\n}\n\nexport default ({ history }: NewGroupButtonProps) => {\n  const navToGroup = () => {\n    history.push('/new-chat/group')\n  }\n\n  return (\n    <Style>\n      <Button onClick={navToGroup}>\n        <div className=\"NewGroupButton-icon\">\n          <GroupAddIcon />\n        </div>\n        <div className=\"NewGroupButton-title\">New Group</div>\n      </Button>\n    </Style>\n  )\n}\n","import { defaultDataIdFromObject } from 'apollo-cache-inmemory'\nimport gql from 'graphql-tag'\nimport * as React from 'react'\nimport { Suspense } from 'react'\nimport { useMutation } from 'react-apollo-hooks'\nimport { RouteComponentProps } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { time as uniqid } from 'uniqid'\nimport * as fragments from '../../graphql/fragments'\nimport * as queries from '../../graphql/queries'\nimport { Chats } from '../../graphql/types'\nimport { NewChatScreenMutation } from '../../graphql/types'\nimport { useMe } from '../../services/auth.service'\nimport Navbar from '../Navbar'\nimport UsersList from '../UsersList'\nimport NewChatNavbar from './NewChatNavbar'\nimport NewGroupButton from './NewGroupButton'\n\nconst Style = styled.div`\n  .UsersList {\n    height: calc(100% - 56px);\n  }\n\n  .NewChatScreen-users-list {\n    height: calc(100% - 56px);\n    overflow-y: overlay;\n  }\n`\n\nconst mutation = gql`\n  mutation NewChatScreenMutation($userId: ID!) {\n    addChat(userId: $userId) {\n      ...Chat\n    }\n  }\n  ${fragments.chat}\n`\n\nexport default ({ history }: RouteComponentProps) => {\n  const me = useMe()\n\n  const addChat = useMutation<NewChatScreenMutation.Mutation, NewChatScreenMutation.Variables>(\n    mutation,\n    {\n      update: (client, { data: { addChat } }) => {\n        client.writeFragment({\n          id: defaultDataIdFromObject(addChat),\n          fragment: fragments.chat,\n          fragmentName: 'Chat',\n          data: addChat,\n        })\n\n        let chats\n        try {\n          chats = client.readQuery<Chats.Query>({\n            query: queries.chats,\n          }).chats\n        } catch (e) {}\n\n        if (chats && !chats.some(chat => chat.id === addChat.id)) {\n          chats.unshift(addChat)\n\n          client.writeQuery({\n            query: queries.chats,\n            data: { chats },\n          })\n        }\n      },\n    },\n  )\n\n  const onUserPick = user => {\n    addChat({\n      optimisticResponse: {\n        __typename: 'Mutation',\n        addChat: {\n          __typename: 'Chat',\n          id: uniqid(),\n          name: user.name,\n          picture: user.picture,\n          allTimeMembers: [],\n          owner: me,\n          isGroup: false,\n          lastMessage: null,\n        },\n      },\n      variables: {\n        userId: user.id,\n      },\n    }).then(({ data: { addChat } }) => {\n      history.push(`/chats/${addChat.id}`)\n    })\n  }\n\n  return (\n    <Style className=\"NewChatScreen Screen\">\n      <Navbar>\n        <NewChatNavbar history={history} />\n      </Navbar>\n      <div className=\"NewChatScreen-users-list\">\n        <NewGroupButton history={history} />\n        <Suspense fallback={null}>\n          <UsersList onUserPick={onUserPick} />\n        </Suspense>\n      </div>\n    </Style>\n  )\n}\n","import Button from '@material-ui/core/Button'\nimport AddIcon from '@material-ui/icons/Add'\nimport { History } from 'history'\nimport * as React from 'react'\nimport styled from 'styled-components'\nimport { User } from '../../graphql/types'\n\nconst Style = styled.div`\n  position: fixed;\n  right: 10px;\n  bottom: 10px;\n\n  button {\n    min-width: 50px;\n    width: 50px;\n    height: 50px;\n    border-radius: 999px;\n    background-color: var(--secondary-bg);\n    color: white;\n  }\n`\n\ninterface CreateGroupButtonProps {\n  history: History\n  users: User.Fragment[]\n}\n\nexport default ({ history, users }: CreateGroupButtonProps) => {\n  const onClick = () => {\n    history.push('/new-chat/group/details', {\n      users,\n    })\n  }\n\n  return (\n    <Style className=\"CreateGroupButton\">\n      <Button variant=\"contained\" color=\"secondary\" onClick={onClick}>\n        <AddIcon />\n      </Button>\n    </Style>\n  )\n}\n","import Button from '@material-ui/core/Button'\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack'\nimport { History } from 'history'\nimport * as React from 'react'\nimport styled from 'styled-components'\n\nconst Style = styled.div`\n  padding: 0;\n  display: flex;\n  flex-direction: row;\n  margin-left: -20px;\n\n  .NewGroupNavbar-title {\n    line-height: 56px;\n  }\n\n  .NewGroupNavbar-back-button {\n    color: var(--primary-text);\n  }\n`\n\ninterface NewGroupNavbarProps {\n  history: History\n}\n\nexport default ({ history }: NewGroupNavbarProps) => {\n  const navToChats = () => {\n    history.push('/new-chat')\n  }\n\n  return (\n    <Style className=\"NewGroupNavbar\">\n      <Button className=\"NewGroupNavbar-back-button\" onClick={navToChats}>\n        <ArrowBackIcon />\n      </Button>\n      <div className=\"NewGroupNavbar-title\">New Chat Group</div>\n    </Style>\n  )\n}\n","import * as React from 'react'\nimport { useState, Suspense } from 'react'\nimport { RouteComponentProps } from 'react-router-dom'\nimport styled from 'styled-components'\nimport Navbar from '../Navbar'\nimport UsersList from '../UsersList'\nimport CreateGroupButton from './CreateGroupButton'\nimport NewGroupNavbar from './NewGroupNavbar'\n\nconst Style = styled.div`\n  .UsersList {\n    height: calc(100% - 56px);\n    overflow-y: overlay;\n  }\n`\n\nexport default ({ history }: RouteComponentProps) => {\n  const [selectedUsers, setSelectedUsers] = useState([])\n\n  return (\n    <Style className=\"NewGroupScreen Screen\">\n      <Navbar>\n        <NewGroupNavbar history={history} />\n      </Navbar>\n      <Suspense fallback={null}>\n        <UsersList selectable onSelectionChange={setSelectedUsers} />\n      </Suspense>\n\n      {!!selectedUsers.length && <CreateGroupButton history={history} users={selectedUsers} />}\n    </Style>\n  )\n}\n","import TextField from '@material-ui/core/TextField'\nimport EditIcon from '@material-ui/icons/Edit'\nimport { defaultDataIdFromObject } from 'apollo-cache-inmemory'\nimport gql from 'graphql-tag'\nimport * as React from 'react'\nimport { useEffect, useState } from 'react'\nimport { useQuery, useMutation } from 'react-apollo-hooks'\nimport { RouteComponentProps } from 'react-router-dom'\nimport styled from 'styled-components'\nimport * as fragments from '../../graphql/fragments'\nimport { SettingsFormMutation } from '../../graphql/types'\nimport { useMe } from '../../services/auth.service'\nimport { pickPicture, uploadProfilePicture } from '../../services/picture.service'\nimport Navbar from '../Navbar'\nimport SettingsNavbar from './SettingsNavbar'\n\nconst Style = styled.div`\n  .SettingsForm-picture {\n    max-width: 300px;\n    display: block;\n    margin: auto;\n    margin-top: 50px;\n\n    img {\n      object-fit: cover;\n      border-radius: 50%;\n      margin-bottom: -34px;\n      width: 300px;\n      height: 300px;\n    }\n\n    svg {\n      float: right;\n      font-size: 30px;\n      opacity: 0.5;\n      border-left: black solid 1px;\n      padding-left: 5px;\n      cursor: pointer;\n    }\n  }\n\n  .SettingsForm-name-input {\n    display: block;\n    margin: auto;\n    width: calc(100% - 50px);\n    margin-top: 50px;\n\n    > div {\n      width: 100%;\n    }\n  }\n`\n\nconst mutation = gql`\n  mutation SettingsFormMutation($name: String, $picture: String) {\n    updateUser(name: $name, picture: $picture) {\n      ...User\n    }\n  }\n  ${fragments.user}\n`\n\nexport default ({ history }: RouteComponentProps) => {\n  const me = useMe()\n  const [myName, setMyName] = useState(me.name)\n  const [myPicture, setMyPicture] = useState(me.picture)\n\n  const updateUser = useMutation<SettingsFormMutation.Mutation, SettingsFormMutation.Variables>(\n    mutation,\n    {\n      variables: { name: myName, picture: myPicture },\n      optimisticResponse: {\n        __typename: 'Mutation',\n        updateUser: {\n          __typename: 'User',\n          id: me.id,\n          picture: myPicture,\n          name: myName,\n        },\n      },\n      update: (client, { data: { updateUser } }) => {\n        me.picture = myPicture\n        me.name = myPicture\n\n        client.writeFragment({\n          id: defaultDataIdFromObject(me),\n          fragment: fragments.user,\n          data: me,\n        })\n      },\n    },\n  )\n\n  // Update picture once changed\n  useEffect(\n    () => {\n      if (myPicture !== me.picture) {\n        updateUser()\n      }\n    },\n    [myPicture],\n  )\n\n  const updateName = ({ target }) => {\n    setMyName(target.value)\n  }\n\n  const updatePicture = async () => {\n    const file = await pickPicture()\n\n    if (!file) return\n\n    const { url } = await uploadProfilePicture(file)\n\n    setMyPicture(url)\n  }\n\n  return (\n    <Style className={name}>\n      <div className=\"SettingsForm-picture\">\n        <img src={myPicture || '/assets/default-profile-pic.jpg'} />\n        <EditIcon onClick={updatePicture} />\n      </div>\n      <TextField\n        className=\"SettingsForm-name-input\"\n        label=\"Name\"\n        value={myName}\n        onChange={updateName}\n        onBlur={updateUser}\n        margin=\"normal\"\n        placeholder=\"Enter your name\"\n      />\n    </Style>\n  )\n}\n","import Button from '@material-ui/core/Button'\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack'\nimport { History } from 'history'\nimport * as React from 'react'\nimport styled from 'styled-components'\n\nconst Style = styled.div`\n  padding: 0;\n  display: flex;\n  flex-direction: row;\n  margin-left: -20px;\n\n  .SettingsNavbar-title {\n    line-height: 56px;\n  }\n\n  .SettingsNavbar-back-button {\n    color: var(--primary-text);\n  }\n\n  .SettingsNavbar-picture {\n    height: 40px;\n    width: 40px;\n    margin-top: 3px;\n    margin-left: -22px;\n    object-fit: cover;\n    padding: 5px;\n    border-radius: 50%;\n  }\n`\n\ninterface SettingsNavbarProps {\n  history: History\n}\n\nexport default ({ history }: SettingsNavbarProps) => {\n  const navToChats = () => {\n    history.push('/chats')\n  }\n\n  return (\n    <Style className={name}>\n      <Button className=\"SettingsNavbar-back-button\" onClick={navToChats}>\n        <ArrowBackIcon />\n      </Button>\n      <div className=\"SettingsNavbar-title\">Settings</div>\n    </Style>\n  )\n}\n","import * as React from 'react'\nimport { Suspense } from 'react'\nimport { RouteComponentProps } from 'react-router-dom'\nimport Navbar from '../Navbar'\nimport SettingsForm from './SettingsForm'\nimport SettingsNavbar from './SettingsNavbar'\n\nexport default ({ history }: RouteComponentProps) => (\n  <div className=\"SettingsScreen Screen\">\n    <Navbar>\n      <SettingsNavbar history={history} />\n    </Navbar>\n    <Suspense fallback={null}>\n      <SettingsForm />\n    </Suspense>\n  </div>\n)\n","import * as React from 'react'\nimport { BrowserRouter, Route, Redirect } from 'react-router-dom'\nimport styled from 'styled-components'\nimport AnimatedSwitch from '../components/AnimatedSwitch'\nimport AuthScreen from '../components/AuthScreen'\nimport ChatScreen from '../components/ChatScreen'\nimport ChatsListScreen from '../components/ChatsListScreen'\nimport GroupDetailsScreen from '../components/GroupDetailsScreen'\nimport NewChatScreen from '../components/NewChatScreen'\nimport NewGroupScreen from '../components/NewGroupScreen'\nimport SettingsScreen from '../components/SettingsScreen'\nimport { withAuth } from '../services/auth.service'\n\nconst RedirectToChats = () => (\n  <Redirect to=\"/chats\" />\n)\n\nexport default () => (\n  <BrowserRouter>\n    <AnimatedSwitch>\n      <Route exact path=\"/sign-(in|up)\" component={AuthScreen} />\n      <Route exact path=\"/chats\" component={withAuth(ChatsListScreen)} />\n      <Route exact path=\"/settings\" component={withAuth(SettingsScreen)} />\n      <Route exact path=\"/chats/:chatId\" component={withAuth(ChatScreen)} />\n      <Route exact path=\"/new-chat\" component={withAuth(NewChatScreen)} />\n      <Route exact path=\"/new-chat/group\" component={withAuth(NewGroupScreen)} />\n      <Route exact path=\"/new-chat/group/details\" component={withAuth(GroupDetailsScreen)} />\n      <Route exact path=\"/chats/:chatId/details\" component={withAuth(GroupDetailsScreen)} />\n      <Route component={RedirectToChats} />\n    </AnimatedSwitch>\n  </BrowserRouter>\n)\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles'\nimport * as React from 'react'\nimport { Suspense } from 'react'\nimport { ApolloProvider } from 'react-apollo-hooks'\nimport * as ReactDOM from 'react-dom'\nimport apolloClient from './apollo-client'\nimport App from './components/App'\nimport registerServiceWorker from './registerServiceWorker'\nimport './index.css'\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: { main: '#2c6157' },\n    secondary: { main: '#6fd056' },\n  },\n  typography: {\n    useNextVariants: true,\n  },\n})\n\nconst startApp = () => {\n  ReactDOM.render(\n    <MuiThemeProvider theme={theme}>\n      <ApolloProvider client={apolloClient}>\n        <Suspense fallback={null}>\n          <App />\n        </Suspense>\n      </ApolloProvider>\n    </MuiThemeProvider>,\n    document.getElementById('root') as HTMLElement\n  )\n\n  registerServiceWorker()\n}\n\n\nif (window.cordova) {\n  document.addEventListener('deviceready', startApp, false)\n}\nelse {\n  startApp()\n}\n"],"sourceRoot":""}